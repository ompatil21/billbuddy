// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled URL for the running app (e.g. pgbouncer)
  directUrl = env("DIRECT_URL") // direct URL for migrations (no pooling)
}

generator client {
  provider = "prisma-client-js"
}

/**
 * -------------------- Enums --------------------
 */

enum SplitType {
  EQUAL
  EXACT
  PERCENT
}

/**
 * -------------------- Core Models --------------------
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // optional to avoid OAuth create failures
  emailVerified DateTime? // required by NextAuth
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // app-specific
  memberships   GroupMember[]
  createdGroups Group[]       @relation("GroupCreator")

  // expense relationships
  paidExpenses Expense[]    @relation("ExpensePayer") // expenses where this user is the payer
  allocations  Allocation[] // per-expense shares owed/credited to this user

  // next-auth
  accounts Account[]
  sessions Session[]
}

model Group {
  id          String   @id @default(cuid())
  name        String
  currency    String // ISO code, e.g. "AUD"
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User          @relation("GroupCreator", fields: [createdById], references: [id], onDelete: Cascade)
  members   GroupMember[]

  // expenses that belong to this group (direct person-to-person expenses will have groupId = null)
  expenses Expense[]

  @@index([createdById])
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String
  role    String @default("member")

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId]) // user can only join once per group
  @@index([userId])
  @@index([groupId])
}

/**
 * -------------------- Expenses --------------------
 */

model Expense {
  id String @id @default(cuid())

  // Optional group: when null, this is a direct expense split with selected people (no group required)
  groupId String?
  payerId String

  description String
  amountCents Int
  currency    String    @default("AUD")
  splitType   SplitType @default(EQUAL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  group       Group?       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payer       User         @relation("ExpensePayer", fields: [payerId], references: [id], onDelete: Cascade)
  allocations Allocation[]

  // Indexes for faster dashboard queries
  @@index([groupId, createdAt])
  @@index([payerId])
  @@index([createdAt])
}

model Allocation {
  id          String @id @default(cuid())
  expenseId   String
  userId      String
  amountCents Int // this user's share for the expense (can be positive; settlements are computed in queries)

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId]) // one allocation per user per expense
  @@index([userId])
  @@index([expenseId])
}

/**
 * -------------------- NextAuth Models --------------------
 */

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // Use Text for potentially long values
  refresh_token String? @db.Text
  access_token  String? @db.Text
  id_token      String? @db.Text
  scope         String?
  token_type    String?
  session_state String?
  expires_at    Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}
