// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled URL for the running app (e.g. pgbouncer)
  directUrl = env("DIRECT_URL") // direct URL for migrations (no pooling)
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // <- optional to avoid OAuth create failures
  emailVerified DateTime? // <- required by NextAuth
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt // <- handy

  // app-specific
  memberships   GroupMember[]
  createdGroups Group[]       @relation("GroupCreator")

  // next-auth
  accounts Account[]
  sessions Session[]
}

model Group {
  id          String   @id @default(cuid())
  name        String
  currency    String // ISO code
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User          @relation("GroupCreator", fields: [createdById], references: [id], onDelete: Cascade)
  members   GroupMember[]

  @@index([createdById])
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String
  role    String @default("member")

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId]) // user can only join once per group
  @@index([userId])
  @@index([groupId])
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // Use Text for potentially long values
  refresh_token String? @db.Text
  access_token  String? @db.Text
  id_token      String? @db.Text
  scope         String?
  token_type    String?
  session_state String?
  expires_at    Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}
